!function(a){function b(){var a=Error.apply(this,arguments);return a.name="NamespaceError",a}function c(a){return j.test(a)&&a||function(){throw new b("Invalid namespace '"+a+"' provided.")}()}function d(a,b,c){for(var e in b)a[e]=k&&g(b[e])?new k(b[e]):b[e];return c&&d.apply(this,[a].concat(i.call(arguments,2)))||a}function e(a,b){return this[a]=this[a]||new k(b)}function f(a,b){return arguments.length>2?f.apply(e.call(this,b,a),[a].concat(i.call(arguments,2))):b&&e.call(this,b,a)||this}function g(a){return"object"==typeof a&&a.constructor==Object.prototype.constructor}function h(a){return"string"==typeof a||"object"==typeof a&&a.constructor===String}var i=Array.prototype.slice,j=/^([A-Z_$][0-9A-Z_$]*)(\.[$A-Z_][0-9A-Z_$]*)*$/i,k=function(a){d(this,a)};k.prototype={"import":function(a,b){return f.apply(this,[b||{}].concat((c(a)||a).split(".")))},register:function(a,e){if(arguments.length<2)throw new b("Two arguments are required.");if(!h(a))throw new b("Namespace should be a string.");return a=[e].concat(c(a).split(".")),f.apply(this,[{}].concat(i.call(a,1,a.length-1)))[a[a.length-1]]=g(e)?d(new k,e):e}},"object"==typeof module&&module&&"object"==typeof module.exports?module.exports=k:"function"==typeof define&&define.amd?define("namespace",[],function(){return k}):"object"==typeof a&&"object"==typeof a.document&&(a.namespace=k)}(window);
//# sourceMappingURL=namespace.min.map